<?php

namespace Behat\Behat\Definition\Pattern;

class SimpleStepMethodNameSuggester implements StepMethodNameSuggester
{
    /**
     * @internal
     *
     * @deprecated provided only for BC, to allow the ContextSnippetGenerator to continue doing this cleanup for any
     *             steps that were generated by a third-party PatternPolicy that does not use our StepMethodNameGenerator
     */
    public static function cleanupMethodName(string $name): string
    {
        if ($name === '') {
            // ContextSnippetGenerator::getUniqueMethodName will increment the trailing number if necessary so that
            // all step methods in a Context have unique names (e.g. stepDefinition2, stepDefinition3, etc).
            return 'stepDefinition1';
        }

        return mb_lcfirst($name);
    }

    public function suggest(string $stepTextWithoutPlaceholders): string
    {
        // Put the text in title case first so that it will become CamelCase when we strip strings
        $name = mb_convert_case($stepTextWithoutPlaceholders, MB_CASE_TITLE);

        // Remove characters that are never valid in a method name
        $name = preg_replace('/[^a-zA-Z0-9_\x80-\xff]/u', '', $name);

        // Remove leading digits (these are the only characters that are valid in a name except at the beginning)
        $name = preg_replace('/^[0-9]+/', '', $name);

        return self::cleanupMethodName($name);
    }
}
